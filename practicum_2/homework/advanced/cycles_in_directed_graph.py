import networkx as nx
from typing import Any
from src.plotting import plot_graph

TEST_GRAPH_FILES = [
    "graph_1_wo_cycles.edgelist",
    "graph_2_wo_cycles.edgelist",
    "graph_3_wo_cycles.edgelist",
]

#Frozenset (–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ) ‚Äì —ç—Ç–æ –∫–ª–∞—Å—Å —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞,
#–Ω–æ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.

#–ó–∞—á–µ–º –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ —Ä–µ–∫—É—Ä—Å–∏–∏, –µ—Å–ª–∏ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤—Å–µ —Ü–∏–∫–ª—ã —Å—Ä–∞–∑—É:
def has_cycles(G: nx.DiGraph, node: Any, visited: set, covered_nodes: set, cycles: set):

    visited.add(node)
    covered_nodes.add(node)

    for neighbor in G.neighbors(node):
        if neighbor in covered_nodes:
            cycles.add(frozenset(covered_nodes)) #—Ö–∑ –ø–æ—á–µ–º—É –æ–±—ã—á–Ω—ã–π set –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
        if neighbor not in visited:
            has_cycles(G, neighbor, visited, covered_nodes, cycles)

    covered_nodes.remove(node)

    return len(cycles)

if __name__ == "__main__":
    for filename in TEST_GRAPH_FILES:
        # Load the graph
        G = nx.read_edgelist(filename, create_using=nx.DiGraph)


        visited = set()
        covered_nodes = set()
        cycles = set()

        answer = has_cycles(G, "0", visited, covered_nodes, cycles)
        if (answer != 0):
            print(f"Graph {filename} has cycles: {answer}: {cycles} üòá")
            plot_graph(G)
        else:
            print(f"Graph {filename} hasn't got cycles üòî")